package com.example.ShopAppEcomere.controller;

import com.example.ShopAppEcomere.dto.request.PasswordCreationRequest;
import com.example.ShopAppEcomere.dto.request.UserRequest;
import com.example.ShopAppEcomere.dto.response.ApiResponse;
import com.example.ShopAppEcomere.dto.response.UserResponse;
import com.example.ShopAppEcomere.entity.User;
import com.example.ShopAppEcomere.service.EmailService;
import com.example.ShopAppEcomere.service.UserService;
import com.example.ShopAppEcomere.validator.ApiMessage;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.multipart.MultipartFile;

import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/v1/users")

@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Slf4j
public class UserController {
    UserService userService;
    EmailService emailService;

    @PostMapping(value = "/register",consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    ApiResponse<UserResponse> createUser(@RequestPart("user")  UserRequest request, @RequestPart("image") MultipartFile file){
        UserResponse userResponse = userService.createUser(request, file);
        // G·ª≠i email th√¥ng b√°o ƒëƒÉng k√Ω th√†nh c√¥ng (ch·∫°y b·∫•t ƒë·ªìng b·ªô)
        sendRegistrationEmail(request.getEmail(), request.getUsername());
        return ApiResponse.<UserResponse>builder()
                .result(userResponse)
                .build();
    }
//    private void sendRegistrationEmail(String email, String username) {
//        CompletableFuture.runAsync(() -> {
//            try {
//                String subject = "ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng";
//                String content = String.format(
//                        "Ch√†o %s,\n\nC·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i!\n" +
//                                "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi ho·∫∑c c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n" +
//                                "Tr√¢n tr·ªçng,\nC·ª≠a h√†ng c·ªßa ch√∫ng t√¥i.",
//                        username
//                );
//
//                emailService.sendEmail(subject, email, content);
//                System.out.println(" Email ƒëƒÉng k√Ω ƒë√£ g·ª≠i th√†nh c√¥ng!");
//            } catch (Exception e) {
//                System.err.println("L·ªói khi g·ª≠i email: " + e.getMessage());
//            }
//        });
//    }
private void sendRegistrationEmail(String email, String username) {
    CompletableFuture.runAsync(() -> {
        try {
            String subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i! üéâ";
            String content = String.format(
                    "<html>" +
                            "<body style='font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 20px;'>" +
                            "<div style='max-width: 600px; background: white; padding: 20px; border-radius: 8px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1);'>" +
                            "<div style='text-align: center;'>" +
                            "<img src='http://localhost:8081/Huy-Hoang.png' alt='Logo' " +
                            "style='width: 150px; height: 150px; margin-bottom: 20px;'/>" +
                            "</div>" +
                            "<h2 style='color: #333;'>Xin ch√†o %s,</h2>" +
                            "<p style='font-size: 16px; color: #555;'>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi <b>C·ª≠a h√†ng c·ªßa ch√∫ng t√¥i!</b> üéâ</p>" +
                            "<p style='font-size: 16px; color: #555;'>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. Ch√∫ng t√¥i r·∫•t vui khi c√≥ b·∫°n ƒë·ªìng h√†nh!</p>" +
                            "<p style='font-size: 16px; color: #555;'>N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o ho·∫∑c c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>" +
                            "<div style='text-align: center; margin-top: 20px;'>" +
                            "<a href='https://your-shop.com' style='padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px;'>Truy c·∫≠p c·ª≠a h√†ng</a>" +
                            "</div>" +
                            "<p style='text-align: center; font-size: 14px; color: #999; margin-top: 20px;'>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng ch√∫ng t√¥i! ‚ù§Ô∏è</p>" +
                            "</div>" +
                            "</body>" +
                            "</html>", username
            );


            emailService.sendEmail(subject, email, content);
            System.out.println("‚úÖ Email ƒëƒÉng k√Ω ƒë√£ g·ª≠i th√†nh c√¥ng!");
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi g·ª≠i email: " + e.getMessage());
        }
    });
}

    @PostMapping("/change-password/{userId}")
    @PreAuthorize("hasAuthority('ROLE_ADMIN') or hasAuthority('ROLE_USER')")
    ApiResponse<UserResponse> changePassword(@PathVariable("userId") Integer userId,@RequestBody @Valid PasswordCreationRequest request) {
        return ApiResponse.<UserResponse>builder()
                .result( userService.changePassword(userId,request))
                .build();
    }
    @GetMapping("/{userId}")
    @ApiMessage("L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID")
    @PreAuthorize("hasAuthority('ROLE_ADMIN') or hasAuthority('ROLE_USER')")
    ApiResponse<UserResponse> getUserById(@PathVariable("userId") Integer userId){
        return ApiResponse.<UserResponse>builder()
                .result(userService.getUserById(userId))
                .build();
    }


    @DeleteMapping("/{userId}")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    ApiResponse<UserResponse> deleteUser(@PathVariable Integer userId){
        return ApiResponse.<UserResponse>builder()
                .result(userService.deleteUser(userId))
                .build();
    }

    @PutMapping("/{userId}")
    @PreAuthorize("hasAuthority('ROLE_ADMIN') or hasAuthority('ROLE_USER')")
    ApiResponse<UserResponse> updateUser(@PathVariable Integer userId, @RequestPart("user")  UserRequest request, @RequestPart("image") MultipartFile file){
        return ApiResponse.<UserResponse>builder()
                .result(userService.update(userId, request,file))
                .build();
    }
}